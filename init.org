* TODO

- check for out-of-date init.el(c) vs init.org
- maximized at startup (from spacemacs)
- undecorated at startup (from spacemacs)

** delete spurious whitespace

Delete whitespace at end-of-line and excess newlines at
bottom-of-file when saving.

#+begin_src emacs-lisp

  (add-hook 'before-save-hook 'delete-trailing-whitespace)

#+end_src

* early-init.el

There are some things that should be done *before* ~init.el~ is loaded. That is
the purpose of ~early-init.el~.

#+begin_src emacs-lisp :tangle early-init.el
  ;; early-init.el  -*- lexical-binding: t; -*-

  ;; THIS FILE IS AUTOMAGICALLY GENERATED FROM `init.org`. ANY EDITS
  ;; MADE TO THIS FILE WILL BE LOST
#+end_src

#+begin_src emacs-lisp :tangle early-init.el

  (setq gc-cons-percentage 0.5
        gc-cons-threshold (* 128 1024 1024))

  (defconst emacs-start-time (current-time))

  (defun report-time-since-load (&optional suffix)
    (message "Loading init...done (%.3fs)%s"
             (float-time (time-subtract (current-time) emacs-start-time))
             suffix))

  (add-hook 'after-init-hook
            #'(lambda () (report-time-since-load " [after-init]"))
            t)

#+end_src

* admin

#+begin_src emacs-lisp
  ;; init.el  -*- lexical-binding: t; -*-

  ;; THIS FILE IS AUTOMAGICALLY GENERATED FROM `init.org`. ANY EDITS
  ;; MADE TO THIS FILE WILL BE LOST
#+end_src

** Personal elisp library

#+begin_src emacs-lisp

  (add-to-list 'load-path (locate-user-emacs-file "lisp"))

#+end_src

** package.el

Add ~melpa~ to ~package-archives~ and initialise the packaging system.
This should leave ~gnu~, ~nongnu~ and ~melpa~ in the list.

#+begin_src emacs-lisp

  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
  
#+end_src

** use-package

#+begin_src emacs-lisp

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  
#+end_src

* Keyboard

* Annoyances

** All the stuff I don't want.

Emacs looks better without the uneeded /menus/, /tool bar/ and /scroll bar/.
If you need the menus, use ~<F10>~.

#+begin_src emacs-lisp

  (setopt sentence-end-double-space nil)

  (setq inhibit-startup-screen t)

  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)

  (setq custom-file (locate-user-emacs-file "custom.el"))
  
#+end_src

* Appearance

** Theme

@prot's /ef-themes/ has a very nice black background theme called /ef-dark/.

#+begin_src emacs-lisp

  (use-package ef-themes
    :init
    (mapc #'disable-theme custom-enabled-themes) ;; Disable all other themes
    :config
    (ef-themes-select 'ef-dark))

#+end_src

** Fonts

/Iosevka Extended/ is a nice font, [[https://phd-sid.ethz.ch/debian/fonts-iosevka/fonts-iosevka_22.0.0%2Bds-1_all.deb][downloadable]] as a .deb. /Source Code Pro/
is another option. /Noto Mono/ would be nice, if it had /italics/.

#+begin_src emacs-lisp

  ;; (custom-set-faces			
  ;;   '(default ((t (:height 180 :family "Source Code Pro")))))
  (custom-set-faces
     '(default ((t (:height 160 :family "Iosevka Extended")))))

#+end_src

** Miscellaneous

Display line numbers in the gutter in all modes. May be better if they
are only displayed in programming modes. In which case, use ~(add-hook
'prog-mode-hook 'display-line-numbers-mode)~.

#+begin_src emacs-lisp

  (global-display-line-numbers-mode 1)

#+end_src

Also display line and column numbers in the mode line.

#+begin_src emacs-lisp

  (column-number-mode 1)
  (line-number-mode 1)
  
#+end_src

* Programming

** yasnippet

#+begin_src emacs-lisp

  (use-package yasnippet
    :config
    (yas-global-mode 1)
    (use-package yasnippet-snippets))

#+end_src

** TODO modes

- shell-script
- JSON
- markdown
- cperl
  
** TODO more

- magit

* Completion

Thanks chatgpt!

#+begin_src emacs-lisp

  ;; Install and enable vertico
  (use-package vertico
    :init
    (vertico-mode 1)
    :bind (:map vertico-map
		("C-n" . vertico-next)
		("C-p" . vertico-previous)))

  ;; Optional: Enable richer annotations using the Marginalia package
  (use-package marginalia
    :init
    (marginalia-mode 1))

  ;; Optional: Enable orderless for more flexible completion styles
  (use-package orderless
    :init
    (setq completion-styles '(orderless))
    (setq completion-category-defaults nil)) ; Needed to avoid some edge cases

  ;; Optional: Use the consult package for enhanced commands
  (use-package consult
    :bind (("C-s" . consult-line)))

  ;; Save minibuffer history
  (use-package savehist
    :init
    (savehist-mode 1))
  
#+end_src

* Org & friends

#+begin_src emacs-lisp

  (setq-default org-hide-emphasis-markers t
                org-image-actual-width '(300)
                org-pretty-entities t
                org-startup-indented t
                org-startup-with-inline-images t
                org-use-sub-superscripts "{}")

  (use-package org-modern
    :hook
    (org-mode . global-org-modern-mode)
    :custom
    (org-modern-keyword t)
    (org-modern-checkbox t)
    (org-modern-table t))

  (use-package org-tempo		
    :ensure nil
    :config
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))

#+end_src
